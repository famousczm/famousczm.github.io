[{"title":"(转)CSS命名规则","date":"2017-03-23T15:02:13.000Z","path":"2017/03/23/转-CSS命名规则/","text":"网上看到这篇关于CSS的命名规则的文章，觉得很有用，就记录下来了学习了 关于团队合作的css命名规范 常用的css命名规则头：header 内容：content/container 尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center 登录条：loginbar 标志：logo 广告：banner 页面主体：main 热点：hot 新闻：news 下载：download 子导航：subnav 菜单：menu 子菜单：submenu 搜索：search 友情链接：friendlink 页脚：footer 版权：copyright 滚动：scroll 内容：content 标签页：tab 文章列表：list 提示信息：msg 小技巧：tips 栏目标题：title 加入：joinus 指南：guild 服务：service 注册：regsiter 状态：status 投票：vote 合作伙伴：partner 注释的写法:/ Footer / 内容区 / End Footer / id 的命名:(1)页面结构容器: container 页头：header 内容：content/container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center (2)导航导航：nav 主导航：mainbav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题: title 摘要: summary (3)功能标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：regsiter 搜索：search 功能区：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 当前的: current 小技巧：tips 图标: icon 注释：note 指南：guild 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright class的命名:(1)颜色:使用颜色的名称或者16进制代码,如.red { color: red; } .f60 { color: #f60; } .ff8600 { color: #ff8600; } （2）字体大小,直接使用”font+字体大小”作为名称,如.font12px { font-size: 12px; } .font9pt {font-size: 9pt; } (3)对齐样式,使用对齐目标的英文名称,如.left { float:left; } .bottom { float:bottom; } (4)标题栏样式,使用”类别+功能”的方式命名,如.barnews { } .barproduct { } 注意事项:: 1.一律小写; 2.尽量用英文; 3.不加中杠和下划线; 4.尽量不缩写，除非一看就明白的单词. 主要的 master.css 模块 module.css 基本共用 base.css 布局，版面 layout.css 主题 themes.css 专栏 columns.css 文字 font.css 表单 forms.css 补丁 mend.css 打印 print.css zhigang","tags":[{"name":"HTML+CSS","slug":"HTML-CSS","permalink":"http://famousczm.github.io/tags/HTML-CSS/"}]},{"title":"Laravel之Auth数据库连接错误","date":"2017-03-21T03:03:41.000Z","path":"2017/03/21/Laravel之Auth数据库连接错误/","text":"学习 Laravel 不足一天，我就迎来了第二个坑，在 Auth 的登录页面随便输入Email地址和密码后，点击登录，弹出如下错误： 看了一下，勉强知道是数据库连接不上的问题，不过这里出错也是正常的嘛，我又没有配置数据库，还以为 PHP 会内置数据库的我实在是太天真了。那么就赶紧去配置数据库吧。解决方法是： 在 Laravel 的根目录下，打开 .env 文件，修改为自己的数据库设置1234DB_HOST=127.0.0.1DB_DATABASE=laravel5DB_USERNAME=rootDB_PASSWORD=password 我用的是MySQL，我先在MySQL里新创建了一个数据库，命名为laravel5(建议创建一个新数据库，不用添加表，因为后面要迁移Auth的内容到这个数据库内)。然后DB_USERNAME里建议用root登录，DB_PASSWORD为你数据库root的密码，这里一定要填准确。 后面要关闭服务器，并输入：1php artisan make:migration 开始迁移，之后打开 laravel5 数据库，就可以发现有三个新添加的表，包括 user 用户表，然后我们就可以重新打开服务器，愉快地注册登录了，数据自动会保存到 laravel5 数据库中。登录成功的界面如下： 总的来说这个坑不算深，是我自己误踩进去的","tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://famousczm.github.io/tags/Laravel/"}]},{"title":"Linux之sl命令","date":"2017-03-21T02:10:17.000Z","path":"2017/03/21/Linux之sl命令/","text":"Linux中的 ls 命令我们经常使用，这甚至是我使用频率最高的命令。用来查询目录下的子目录或文件，还有查看目录和文件的属性和权限的功能。然而有时有人手快输错了变成 sl （至少我重来没有输错过……），就会出现一个冷冰冰的错误提示，提示这个命令不存在，让人大受打击 因此，sl 就这样应运而生，它的作用是纠正用户的错误习惯，并且还能给用户在黑漆漆的窗口和冷冰冰的代码命令中得到一丝温暖，让人能够会心一笑。不过这需要安装，安装命令：1sudo yum install sl Ubuntu 用户请用1sudo apt-get install sl 然后就是愉快地写错命令了（误ORZ），下面来详细看下sl 的各种用法并与 ls 的对比：1ls 就是显示目录下的文件1sl 巨型D51火车从右到左冒着烟横穿而过，我察觉到输错命令了哈哈 1ls -a 显示目录下所有文件 1sl -a 一场事故似乎发生了，巨型火车上有人发出了help的求救，你会为他/她感到可怜的，因为命令输错了啊 1ls -F 列出文件下的子目录 1sl -F 火车由右下角直奔左上角 1ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。 1sl -l 一辆小型火车呼啸而过 1ls -c 排序文件 1sl -c C51火车取代了原先的D51火车呼啸而过 以上就是sl的全部命令，真是好玩啊，这里再分享一个捉弄人的办法，把系统中的ls命令替换成sl命令：1alias ls=&apos;sl&apos; 简直是恶作剧必备啊哈哈哈改回来用：1alias ls=&apos;ls&apos; 即可 还有我发现一个sl很有趣的地方，就是火车经过的动画不能用ctrl+c来中断，这下更好玩了","tags":[{"name":"Linux","slug":"Linux","permalink":"http://famousczm.github.io/tags/Linux/"}]},{"title":"Laravel初体验","date":"2017-03-20T09:20:40.000Z","path":"2017/03/20/Laravel初体验/","text":"Laravel作为一个框架在PHP界久负盛名，以简洁优雅著称。目前以发布了Laravel 6，但是刚学习还是以较为流行的Laravel 5开始学吧 Laravel 5.0 开始对 PHP版本的要求是要&gt;=5.4，我的是5.6没问题。下载一键安装包并解压到某个文件夹，命令行进入该文件夹，输入：1php artisan serve 出现如下提示：1Laravel development server started on http://localhost:8000/ 并打开浏览器输入地址:localhost:8000，出现题图的界面说明Laravel启动成功 等等！我之前在本机上的Apache端口号是8088，说明这不是运行在Apache上的，这怎么好像Laravel内置了个Web服务器的感觉？？ 其实这的确是使用了其它的服务器，但并不是 Laravel 内置了服务器，而是PHP内置的服务器，PHP从5.4版本以来就内置了一个Web服务器（所以这就是 Laravel 5必须PHP要有5.4版本以上的原因？？）并且Laravel 的 artisan 命令也支持这个内置 web 服务器，所以 Laravel 能运行在内置的服务器里。 内置服务器与传统服务器（Apache/Nginx之流的）的区别是内置服务器不适合用作生产环境中，只能在本地环境中运行和解析PHP代码，而且这也是极其方便，对于在本地上开发网站来说。而且打开内置服务器也十分简单，在当前项目的根目录里输入：1php -S localhost:8000 就可以了，也能正常解析PHP代码，不用为配置Apache或Nginx错误而烦恼不已。 继续扯回 Laravel … artisan 的serve命令还 host 和 port 这两个参数，看名字就知道这是配置主机地址和端口号的，如：1php artisan serve --port=8080 就可以把端口号改为8080了 因为我使用的是一键安装包，项目建在哪里就直接往哪里解压就是了，没有下载安装网上说的 composer （隐约感觉到后面会有一大波错误袭来）。果不其然，使用牛逼哄哄的Auth系统时（Laravel 内置的简单注册登录功能）：1php artisan make:auth 激活Auth（这要先关闭服务器，激活后再打开服务器），界面是出来了，如下： 但是，点击HOME时却弹出这个东西（深感不妙，该来的总会来） 说是什么 Encryption.php 里的 openssl_encrypt() 函数没定义，然后我当然就是去找 Encryption.php 这个文件了，可是不知道是我用一键安装包的原因还是我没仔细找的原因，找了半天都没不知道这个文件躲哪里了。后来另寻它路，把各种安装教程都仔细看一遍，解决方法是： 在PHP的根目录里找到php.ini这个配置文件，打开，在大约893行的位置找到1;extension=php_openssl.dll 并把前面的分号去掉，保存，重启服务器就好了，（nice，问题解决了就兴奋得想大叫） Laravel 先探索到这里，感觉还有很多东西要学的 &gt;__&lt;","tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://famousczm.github.io/tags/Laravel/"}]},{"title":"阿里云学生机硬盘读写速度测试","date":"2017-03-20T06:41:03.000Z","path":"2017/03/20/阿里云学生机硬盘读写速度测试/","text":"看了Linux中国的一篇文章测试服务器的硬盘读写速度，也想试试看阿里云学生机的硬盘读写速度能到什么水平，毕竟是最低配置… 先测试写入速度：1time dd if=/dev/zero of=/var/test bs=2k count=1000000 命令解释： time 用于计时 dd 用于复制，从if读出，写到of if=/dev/zero不产生IO，因此可以用来测试纯写速度；所以后面测试纯读速度，就是 of=/dev/null不产生IO bs是每次读或者写得大小，即一个块的大小，count是读写块的数量，相乘就是读写数据量大小，我这里测试2G数据的写入速度 连续测试三次的结果如下：取平均值就是46.1MB/s了，比Linux中国测试的23.2MB/s几乎快了一倍，所以还是蛮快的，作为WEB服务器已经足够用了 所以同理读速度的测试是1time dd if=/var/test of=/dev/null bs=2k 测试结果为： 平均值为20.6MB/s，可看出，读速度远不如写速度快啊 不过这种低配服务器也只是HDD，不可能是SSD，能用就好 今天天气不错啊，适合出去走走，刚买了域名www.homehouse.tech，关于home的域名大部分都被注册了… 寂寞之时，既想热闹；喧嚣之场，亦思闲静。人情大抵皆然。如猴子在树下，则思量树头果；及在树头，则又思量树下饭。往往复复，略无停刻，良亦苦矣。 节选自《袁宏道集笺校》，卷二十–《兰泽、云泽两叔》","tags":[{"name":"Linux","slug":"Linux","permalink":"http://famousczm.github.io/tags/Linux/"}]},{"title":"Foundation初体验","date":"2017-03-19T13:25:31.000Z","path":"2017/03/19/Foundation初体验/","text":"框架的确是一个很奇妙的玩意，好的框架能让你省时省力，更重要的是它还非常简洁美观易于上手！！Foundation就是这样一个集各种优点在一身的响应式前端开发框架，对于想快速搭建一个漂亮的网站的初学者来说，这无疑是一个能让人赞叹“帮了个大忙”的利器啊（嘛，当然前提是要有最基本的前端知识） Foundation设计好了各种小部件的样式，还有小部件所对应的js控制也做好了，就让我们直接调用就是了。框架就是这么一回事，让开发者集中精力在网站的整体设计和内容上，事半功倍。不过，一直过于依赖框架而从不去了解CSS和js的实现这也是一种停滞不前的做法，我觉得没有对技术的执着追求是不适合干这一行的，程序员不都是这样的一个存在吗？ 目前正在和弟弟一起联手开发咱们自己家的网站，这是我一直以来就非常想实现的一个目标，我打算用Foundation来做，让我见识你的强大之处吧，后台方面决定用laravel，希望一切顺利吧~ (ง๑ •̀_•́)ง","tags":[{"name":"Foundation","slug":"Foundation","permalink":"http://famousczm.github.io/tags/Foundation/"}]},{"title":"服务器上部署网站","date":"2017-03-18T15:39:47.000Z","path":"2017/03/18/服务器上部署网站/","text":"刚学网站开发的时候就很想把自己的作品能发布在网上，能让别人访问到，倍有成就感。但是一直碍于自己的技术还没成熟，想多学学再去想这些事。 现在由于课程的原因，老师要我们租服务器做实验，我也觉得时机已经到了，在阿里云租了台云服务器，学生机最低配置，每月9.9元，相对来说还是挺值得。有点后悔之前没下决心啊。 CentOS6.8系统，内置Oneinstack，开发环境是LNMP，真是省去了不少功夫啊。 用putty远程登录服务器，Linux基础的操作都烂熟于心了。这里还非常感激阿里云提供的帮助手册，帮了大忙，介绍得非常详细 这也是我头一次用Nginx，之前用的都是Apache，Tomcat，IIS啥的，不过服务器在我看来都差不多，除了能解析的后台语言可能有点不太一样，我还重来没有仔细研究它们之间的区别。1cd /etc/nginx/conf.d 进入Nginx的配置文件夹下 1vim default.conf 修改这个默认配置的内容 12345listen 80;#listen [::]:80 default_server;server_name _;root /data/wwwroot/default/海花A620网站-开发中;index A620.html; root 下的路径改为自己的网站文件夹的路径index 下写默认的网站主页 1service nginx restart 重启一下服务器，然后在浏览器中输入IP地址，即可看到自己的网站 关于怎么把本机里的网站文件传送至服务器中，可以用FTP文件传输协议来完成，先在服务器上创建一个FTP账号，Oneinstack在这里发挥了巨大的作用，执行pureftpd_vhost.sh这个文件，可以清晰明了地创建FTP账号并管理它。 创建好FTP账号之后就可以用相关软件来传输文件了，我这里用FlashFXP，添加好服务器地址和FTP账号密码之后，就可以连接上服务器并传输文件了 oneinstack还提供了许多管理工具来使我们能够方便地管理我们的服务器开发环境，如PHP版本切换，JDK版本切换，网站数据迁移至云盘，MySQL数据库管理，管理虚拟主机，管理FTP账号，备份等等。 写完这篇博客已经凌晨十二点半了，洗洗睡吧zZ","tags":[{"name":"Linux","slug":"Linux","permalink":"http://famousczm.github.io/tags/Linux/"}]},{"title":"换电脑后的博客管理","date":"2017-03-18T12:31:05.000Z","path":"2017/03/18/换电脑后的博客管理/","text":"之前硬盘坏了，换硬盘后，一切都是空白，以前所有的设置都没有了，包括这博客的更新。最近查阅了网上的资料，终于可以重新更新了，而且这次也吸收教训，要做好备份。 以前我写完博客deploy到github上，只是把编译后的静态网页给保存了，以至于我clone下来也没什么用。所以这次我新开一个分支用来存放博客的原始文件，另一个分支则用来保存静态网页文件。这样维护起来也简单明了。新分支命名为Hexo。设定为默认分支。 然后在本地新建个文件夹，shift+鼠标右键打开Git Bash输入： 1git clone git@github.com:famousczm/famousczm.github.io.git 拷贝仓库接着在famousczm.github.io.git文件夹下一次执行下面的命令:npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（由于之前没有备份好，只能重新设置一遍了） 此时，再把之前的博客文章，重新写一次，并转为md文件 新建博客的命令：1hexo new &apos;博客名字&apos; 花了点时间写好，并且重新温习了MarkDown后，可以用下面这个命令： 1hexo g -d 然后打开浏览器，输入http://localhost:4000/，可以看到博客的预览效果 确定无误之后，再配置之前博客的主题，我之前的主题是yilia，十分简洁好看1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 可能是网络问题，我下了几次都不成功，然后我直接到作者的github下载下来了……并把文件放到themes的yilia文件夹下。 先配置主目录下的主配置文件_config.yml，在最后一行deploy:下加入：123type: gitrepository: https://github.com/famousczm/famousczm.github.iobranch: master 这样编译过后的静态网页就存放在master分支上了 在一次预览一下，跟想象中的一样，这次yilia的作者更新了许多小设置，更好看了，喜欢 喜欢就再依次输入：123git add .git commit -m &quot;...&quot;git push origin hexo 把博客源文件push到Hexo分支上，到这一步我遇到了一个问题：我在git add .的地方出错了错误提示为：1234567891011warning: You ran &apos;git add&apos; with neither &apos;-A (--all)&apos; or &apos;--ignore-removal&apos;,whose behaviour will change in Git 2.0 with respect to paths you removed.Paths like &apos;2016/10/05/Eclispe不能导入java-util-Arrays/index.html&apos; that areremoved from your working tree are ignored with this version of Git.* &apos;git add --ignore-removal &lt;pathspec&gt;&apos;, which is the current default, ignores paths you removed from your working tree.* &apos;git add --all &lt;pathspec&gt;&apos; will let you also record the removals.Run &apos;git status&apos; to check the paths you removed from your working tree. 解决方法： 1git add -A 解决之后，再把静态网页也布置上去1hexo g -d 这里静态网页就去到了master分支了，这是_config.yml的作用，而之前的push到Hexo分支是因为默认分支就是Hexo 到此已经成功将博客部署上去了，这下就可以正常更新博客了 以后的日常更新就是依次执行：1234git add .git commit -m &quot;...&quot;git push origin hexohexo g -d 哪一天电脑又坏了，或者临时要在别的电脑上更博，只需：1git clone git@github.com:famousczm/famousczm.github.io.git 复制这个Hexo分支的源文件下来，再执行：123npm install hexonpm installnpm install hexo-deployer-git 即可，此处不需要执行hexo init，因为基本的文件Hexo里已经保存有了 我又回来了( ◕‿‿◕ )","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://famousczm.github.io/tags/Hexo/"}]},{"title":"JAVA java.io.Writer.write(Unknown Source)","date":"2016-11-05T06:35:51.000Z","path":"2016/11/05/JAVA-java-io-Writer-write-Unknown-Source/","text":"今天在做一个使用JAVA的输入输出流将一个文本文件的内容按行读出，每读出一行就顺序添加行号，并写入到另一个文件中的练习时，写入文件的过程中遇到未知错误如下： 123Exception in thread &quot;main&quot; java.lang.NullPointerException at java.io.Writer.write(Unknown Source) at sy_10.sy10_7.main(sy10_7.java:26) 我程序代码是： 1234567891011121314151617181920212223242526272829303132333435package sy_10;import java.io.*;public class sy10_7 &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub File f = new File(&quot;E:\\\\Coder\\\\java\\\\eclipse\\\\test\\\\src\\\\sy_10\\\\Example10_7.java&quot;); File f1 = new File(&quot;E:\\\\Coder\\\\java\\\\eclipse\\\\test\\\\src\\\\sy_10&quot;,&quot;Example10_7.txt&quot;); String s = null; int i = 1; String content[] = new String[50]; try&#123; FileReader inOne = new FileReader(f); BufferedReader inTwo = new BufferedReader(inOne); while((s = inTwo.readLine())!= null)&#123; s = i + &quot;. &quot; + s; content[i-1] = s; i++; System.out.println(s); &#125; inTwo.close(); inOne.close(); FileWriter outOne = new FileWriter(f1); BufferedWriter outTwo = new BufferedWriter(outOne); for(String str:content)&#123; outTwo.write(str); outTwo.newLine(); &#125; outTwo.close(); outOne.close(); &#125; catch(IOException e)&#123; System.out.println(e); &#125; &#125;&#125; 这个错误以前没有遇到过，错误地方就在 1outTwo.write(str); 是写入时有问题，刚开始以为是参数str类型不对，然而并不是，str是String类型没问题，单独输出正常。 网上找了一下，很多说是输入输出流关闭不正确，我想可能是字符流跟缓冲流的关闭顺序不对，把各种顺序都试了一遍，哈！！然而也不是.. 再把写出的操作注释掉，程序正常显示。好吧，把outTwo.write(str);断点然后debug找找原因，在写入时我发现数组content有点异常，初始化时分配了50个数组元素，即表示写入文件时要写入50行，而实际需要写入的只有32行。 把数组元素改为32个时就可以正常写入了….我想这大概是内存溢出导致的异常。具体原因我也不知道。但程序这样写肯定是不行的。因为文件不能总是只有32行吧。 我觉得这应该是数组到了32个元素之后就没有值了，即为null值。所以往文本中写入null值就会出错，这样Unknown Source就可以解释了。所以改了一下写入文本的for循环： 1234567for(String str:content)&#123; if(str == null)&#123; break; &#125; outTwo.write(str); outTwo.newLine(); &#125; 这样之后，把content数组设置为50个元素也不会出错了！！ debug再次救了我","tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://famousczm.github.io/tags/JAVA/"}]},{"title":"Oracle复制另一用户下的表","date":"2016-10-26T06:31:29.000Z","path":"2016/10/26/Oracle复制另一用户下的表/","text":"Oracle下要将用户A里的表T复制给用户B，首先要登陆用户A，用如下语句把查询表T的权限赋给用户B： 1GRANT SELECT ON T TO A; 然后登陆用户B，复制表T并命名为S： 1CREATE TABLE S AS SELECT * FROM A.T; 这样就可以了（表名前一定要加上模式名）","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://famousczm.github.io/tags/Oracle/"}]},{"title":"PHP字符编码","date":"2016-10-18T06:31:12.000Z","path":"2016/10/18/PHP字符编码/","text":"昨天用PHP做项目的时候遇到了浏览器字符编码的问题，用Chrome和FF来做测试。本想着改浏览器网页显示的字符编码就可以了，结果一刷新或重新打开就又乱码了。解决方法是设置要浏览器的默认字符编码 Chrome很简单，打开设置-&gt;显示高级设置-&gt;网络内容-&gt;自定义字体-&gt;编码，设置为UTF-8即可 FireFox的49.01版设置不了UTF-8编码，只有各种语言的选择。只能用alt弹出隐藏的菜单栏，在查看那里设置文字编码，不过这不是默认的，刷新就又重置了。 所以以上都不是办法，别人访问你的网站可不能要让别人要先设置默认的字符编码才能看到中文啊。真正的方法是在PHP中设置meta标签 在html的head标签里加上： 1&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; 即可。我写PHP是用Zend Studio，新建PHP文件的时候没有xml的模板，在Windows-&gt;Preferences-&gt;PHP-&gt;Editor-&gt;Templates中新建一个也不行。解决方法是替换原来的html4.01的模板，Windows-&gt;Preferences-&gt;PHP-&gt;Code Style-&gt;Code Templates-&gt;Code,选中html4.01frameset然后编辑把xml的模板替换原来的模板。到这里还没有完成，因为Zend Studio还没有将charset设置的值转化。 继续设置Generate-&gt;WorkSpace,把Text file encoding勾选other选中UTF-8就可以了 今天大雨。","tags":[{"name":"PHP","slug":"PHP","permalink":"http://famousczm.github.io/tags/PHP/"}]},{"title":"树莓派初体验","date":"2016-10-12T06:13:29.000Z","path":"2016/10/12/树莓派初体验/","text":"上课的时候突然想买个树莓派来玩玩，就马上入手了Raspberry Pi3 B+，等了三天，今天终于来了。这玩意看似便宜，其实为了能真正使用它，还要配备其它器件啊。我顺带买了32G的内存卡（树莓派要外带硬盘），电源适配器（Pi3要求有5V，2.5A的电源，懒得找，就买了）还有个官方外壳（保护作用，没错，树莓派来的时候是裸着的）。本来还需要个显示器的，因为树莓派的视频接口是HDMI，很遗憾我宿舍没有电视机，台式显示屏倒是有一个，可是我忘了买转VGA的转换器，而且人家也要用。所以就按照网上说的用笔记本远程连接咯。于是我又买了路由器，两条网线。一切准备就绪！ 首先，格式化并烧录SD卡，格式化的时候系统提示磁盘写保护，不能写入数据也不能格式化。把读卡器的LOCK来回拨了几次，修改注册表也不行。其实是读卡器的问题，换一个就好了 用软件Win32DiskImager把下载好的2016-05-10-raspbian-jessie.img镜像烧录进SD卡，几分钟就完事了 把内存卡插进树莓派，接上电源，用网线连上路由器。打开软件advanced_ip_scanner，检索树莓派的IP地址 再用putty输入IP，端口22连接。默认用户名：pi 密码：raspberry 登陆进之后，输入命令： 1sudo raspi-config 进入配置界面 这里我选第一个扩展SD空间，因为树莓派安装完成后只用了部分SD卡的空间，所以不浪费资源，就扩展SD空间咯。另外我还改了登陆密码，其它就先不管它。 接下来进行基础配置。添加国内的软件源，因为树莓派默认的服务器比较慢 1sudo vi /etc/apt/sources.list 把里面的内容删了，复制粘贴下面的内容 12deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main non-free contribdeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main non-free contrib 保存退出，运行 1sudo apt-get update 配置一个静态地址，现在的ip地址是自动分配的，每次登陆都不相同，找ip地址也会费一些功夫，所以设置一个固定的地址方便以后登陆。 1sudo vi /etc/network/interfaces 找到iface eth0 inet manual，改为 123iface eth0 inet staticaddress 192.168.1.102netmask 255.255.255.0 保存退出，重启网络 1sudo /etc/init.d/networking restart 为了能操作树莓派的界面，我用VNC来远程登陆，首先添加安装vnc server 1sudo apt-get install tightvncserver 运行tightvncserver 1tightvncserver 这时会要求输入几次密码，网上说这是控制密码，然后选择性输入查看密码，查看密码只能用来查看桌面，而控制密码才能对桌面进行操作。 然后下载VNC软件安装后，输入ip地址：端口号（1,2,3都可以），端口号不同区分不同的用户 连接后要求输入树莓派密码，输入后就能登陆树莓派操作界面了，尝试上网，能行。发现树莓派这个Liunx系统默认安装python2和3啊，以后编程还是以python为主了。 最后就是如何关闭树莓派了，树莓派插上电源就自动开机，关闭它当然不是直接拔开，这算非正常断电，很容易损坏树莓派，正确方法是 1sudo shutdown -h now(或其它一切关机的命令) 然后知道黄色的指示灯不闪了，只剩红色的电源指示灯，这时就表明树莓派已经关机了，然后就可以拔电源了","tags":[{"name":"树莓派","slug":"树莓派","permalink":"http://famousczm.github.io/tags/树莓派/"}]},{"title":"Linux添加磁盘","date":"2016-10-08T06:13:13.000Z","path":"2016/10/08/Linux添加磁盘/","text":"今天学习了Linux关于磁盘的知识，以添加磁盘为例总结一下： 我用的是VirtualBox虚拟机，先关掉Linux，然后在VBox的设置-&gt;存储-&gt;控制器，右键添加虚拟硬盘-&gt;选创建一个新的虚拟盘-&gt;选VDI-&gt;动态分配-&gt;然后就分配自己想要的磁盘大小，不过要在分配的那个盘所接受的范围内就行。 创建好后，运行Linux。 为新添加的磁盘分区。用管理员权限输入命令 1fdisk -l 查看目前磁盘信息，看到1Disk /dev/sdb: 8589 MB, 8589934592 bytes 这一行信息中的/dev/sdb就是新添加的磁盘了（不知道是不是都是叫sdb的…检查一下大小与自己划分的一样就是了，这里我用了默认的8G） 确认好新增的磁盘后，再输入： 1fdisk /dev/sdb 进入分区模式，这里有一堆命令可操作，用常见的’p’查看当前磁盘的分区情况、’n’建立一个新分区和’d’删除一个分区，这几个命令即可。输入p，可以看见磁盘sdb并没有被分过区 再输入n，开始分区，可以选择’e’扩展分区，’p’主分区，之前看鸟哥的教程时看得糊里糊涂，实操之后就知道是怎么回事了，总共可以分4个分区，可以是四个主分区，但是如果想要分不止四个分区的话，就要用扩展分区了，可以三个主分区+一个扩展分区，然后再从扩展分区里划分逻辑分区，前三个主分区的标识是sdb1，sdb2，sdb3，扩展分区是sdb4，逻辑分区是由sdb5开始一直推算下去的。这里无论前面四个分区怎么设置，只划分一个也好，逻辑分区都是从sdb5开始的。还有一点必须要注意的是，划分了扩展分区后，剩下的只能从扩展分区中划分逻辑分区了，不管你之前的空间有没有分配完，所以一般主分区划分完后，剩下的所有空间一股脑的全塞给扩展分区就对了，不要省着，省着就是浪费了。 不小心分错了也不要紧张，因为还没有保存，可以用ctrl+c快速退出，再重新分区，所以可以好好研究研究一下吧，不过怎么说分区都是个高危工作，如果磁盘里有重要资料的话还是小心一点为妙。 格式化磁盘。分好区后，输入命令： 1mke2fs -t ext4 -L TEST /dev/sdb5 我系统是CentOS6.5，所以文件系统用的是ext4，设置了标签TEST 挂载磁盘。磁盘要挂载在一个目录中，才能使用这个磁盘，但是如果一个目录原先有文件存在的话，挂载磁盘后所有数据将会被覆盖，消失了。卸载磁盘后才可以看到。就是这么回事，所以就要找个空目录来挂载咯。 我在根目录下新建一个目录newdir，输入命令： 1mount /dev/sdb5 /newdir/ 再看看磁盘信息 1df -h 显示信息，挂载成功 123456[root@localhost user1]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/VolGroup-lv_root 7.5G 738M 6.4G 11% /tmpfs 250M 0 250M 0% /dev/shm/dev/sda1 485M 31M 429M 7% /boot/dev/sdb5 989M 18M 921M 2% /newdir 设置开机挂载。在文件/etc/fstab最后一行，添加我新磁盘sdb5的信息 1LABEL=TEST /newdir ext4 defaults 0 0 保存退出，设置完成 不懂的地方还是有很多，不过思路总算明朗了一点，最后想说的是LABEL经常打错成LABLE啊啊啊，导致好几次运行出错，英语也要好好学啊，切记切记…","tags":[{"name":"Linux","slug":"Linux","permalink":"http://famousczm.github.io/tags/Linux/"}]},{"title":"Linux的目录","date":"2016-10-06T06:00:42.000Z","path":"2016/10/06/Linux的目录/","text":"学习Linux中，很多操作和设置都要涉及各个目录，所以认识明白Linux各个目录的作用非常重要，而且我为了省内存没有安装图形界面(:з」∠)于是就在网上找来了关于linux目录的资料来学习学习啦。 首先“/”代表了linux的根目录，就相当于树根一样。在linux系统中文 根文件系统，linux所有的一切全部在这里面存放着。 /bin：（binary）用来存放二进制可执行的命令，包含了普通用户可能用到的命令，这些命令都是二进制文件。/usr/bin在此目录下也可存放二进制命令 /home 这个目录就不用说了，就是存放用户的目录。系统里新建一个用户就会在/home目录下为用户创建一个目录。 /sbin：目录类似/bin也是用于存储二进制文件，非普通用户所使用的命令，大多为系统管理员使用的基本的系统程序。 /etc：目录存放着各种系统配置文件，一些应用程序服务配置文件，用户和组信息文件（/etc/passwd 和/etc/group）linux也正是由这些文件才得以正常地运行。 /root: 是超级用户的目录。 /lib：目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文 件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副 本，故可以使得可执行文件变得更小，节省空间。 在/lib/modules目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引导系统所需的模块(例如网络和文件系统驱动)。 /dev目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用 户可以通过访问/dev/mouse来访问鼠标的输入，就像访问其他文件一样。 /tmp目录存放程序的运行是的缓存信息和数据，但在引导启动后，运行程序最好使用/var/tmp来代替/tmp，因为/var/tmp可能拥有更大的磁盘空间，分区时一般会把/var单独挂到一个磁盘上。 /boot 目录存放的引导加载器使用的文件，核心映像也经常放在这里，而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的 文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在IDE硬盘的前1024柱面内。 /mnt 目录是系统管理员临时安装挂载（mount）文件系统的安装点。系统并不自动支持安装到/mnt。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用msdos文件系统的软驱，而/mnt/exta 可能是使用ext2文件系统的软驱，/mnt/cdrom 光驱等等。 /var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化 或扩充的。原来/var目录中有些内容是在/usr中的，但为了保持/usr目录的相对稳定，就把那 些需要经常改变的目录放到/var中了，各种服务的日志信息。 /usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的 所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是 可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的配置 文件。 /proc文件系统/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一 个非 常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提供关于系 统的信息。 这趟水还真深","tags":[{"name":"Linux","slug":"Linux","permalink":"http://famousczm.github.io/tags/Linux/"}]},{"title":"Hexo的评论功能","date":"2016-10-06T05:58:51.000Z","path":"2016/10/06/Hexo的评论功能/","text":"换了Litten的yilias主题，简洁、舒服，深得我心。然后在多说创建了站点为博客设置评论的功能。多说能够使用户方便地在后台管理留言，嗯，看起来还是很好用的（如果留言人数多的话） 复制多说提供的代码，打开themes/yilias/layout/_partial/下的文件article.ejs，把最后一段: 1234&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt; &lt;section id=&quot;comments&quot;&gt; &lt;/section&gt;&lt;% &#125; %&gt; 替换成1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt; &lt;section id=&quot;comments&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&quot;famousczm&quot;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt; 注意：short_name: 后面要填自己站点的short_name，即在创建站点时的站点名称 保存后，打开站点配置文件_config.yml，在最后一行写上： 1duoshuo_shortname: famousczm（自己的short_name） 完成这些后，我发现博客虽然已经有了评论功能，但是不单单每篇文章下有评论，主页上用来预览的文章下也堆满评论，这很傻啊！找了很久原因，才发现是主题配置文件_config.yml忘记设置了，只要把duoshuo改成这样就好了 1duoshuo: &quot;famousczm&quot;","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://famousczm.github.io/tags/Hexo/"}]},{"title":"Eclispe不能导入java.util.Arrays","date":"2016-10-05T05:55:11.000Z","path":"2016/10/05/Eclispe不能导入java-util-Arrays/","text":"做练习的时候，出现了不能导入java.util.Arrays的问题，找来两大java高手（反正java方面比我厉害）来研究了很久都没法解决。 这个问题看起来的确很诡异，Arrays类确确实实存在着，能找到，其它类也能导入，但就是没办法导入这个。网上众说纷纷，都是没有什么好解决方法。 今天把JDK1.8换成了1.7，就成功了，看来确实是版本的问题，据说是JDK1.8太新了，不太稳定。而且顺带发现并解决了在命令行中无法编译java文件的问题 ，原因是安装JDK和jre的过程中，不能放在同一文件夹下，会有冲突。 这下可以继续做作业了。","tags":[{"name":"Java","slug":"Java","permalink":"http://famousczm.github.io/tags/Java/"}]},{"title":"Hexo中文乱码","date":"2016-10-05T05:52:43.000Z","path":"2016/10/05/Hexo中文乱码/","text":"用Hexo搭建的博客title默认为Hexo，我想修改为自己设置的值。于是在public文件夹下的index.html中修改title的值，可是重新生成静态文件时一切又恢复为默认值Hexo。 原因是每次更新博客时都是在Git Shell中清除缓存文件和已生成的静态文件，然后再重新生成新的静态文件。最后deploy到github上，所以原来的index.html文件已经被毁灭了再生成，原先的设置也不复存在了 这要在文件_config.yml中修改title的值，把 title： Hexo 修改为 title: 柱铭（填要修改的值） 即可，要注意的是，：后面要空一个格 到这里重新部署时，网页的title出现乱码 解决方法： 把_config.yml文件编码成UTF-8即可 我用Notepad++的操作是：格式-&gt;转为UTF-8编码格式-&gt;保存","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://famousczm.github.io/tags/Hexo/"}]},{"title":"第一篇博客","date":"2016-10-05T05:46:02.000Z","path":"2016/10/05/第一篇博客/","text":"Markdown 是一种用来写作的轻量级「标记语言」，即跟HTML差不多，不过更为简洁和高效。使用的标签既简单又少，很容易就能记住了，而且Markdown相比格式更注重内容，所以写起来并不麻烦。文件后缀为md，因为在Github里要用到这个标记语言，所以就技多不压身地学习了咯 这是我的第一篇博客，有点简陋","tags":[{"name":"学习心得","slug":"学习心得","permalink":"http://famousczm.github.io/tags/学习心得/"}]}]